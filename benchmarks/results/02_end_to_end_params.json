{
  "In": [
    "",
    "import os, sys\nsys.path.append(os.path.abspath('../..'))\nimport pandas as pd\nfrom benchmarks.runner import BenchmarkRunner\nfrom benchmarks.backends import StatevectorBackend, DecisionDiagramAdapter, MPSAdapter, StimAdapter\nfrom benchmarks import circuits\nfrom quasar.simulation_engine import SimulationEngine\nfrom quasar_convert import ConversionEngine\nimport time, matplotlib.pyplot as plt",
    "class TrackingConversionEngine(ConversionEngine):\n    def __init__(self):\n        super().__init__()\n        self.total_time = 0.0\n    def _timeit(self, func, *args, **kwargs):\n        start = time.perf_counter()\n        res = func(*args, **kwargs)\n        self.total_time += time.perf_counter() - start\n        return res\n    def convert_boundary_to_statevector(self, ssd):\n        return self._timeit(super().convert_boundary_to_statevector, ssd)\n    def convert_boundary_to_tableau(self, ssd):\n        if hasattr(super(), \"convert_boundary_to_tableau\"):\n            return self._timeit(super().convert_boundary_to_tableau, ssd)\n        raise AttributeError\n    def convert_boundary_to_dd(self, ssd):\n        if hasattr(super(), \"convert_boundary_to_dd\"):\n            return self._timeit(super().convert_boundary_to_dd, ssd)\n        raise AttributeError\n    def extract_local_window(self, state, qubits):\n        return self._timeit(super().extract_local_window, state, qubits)\n    def build_bridge_tensor(self, left, right):\n        return self._timeit(super().build_bridge_tensor, left, right)",
    "circuit_fns = {\n    'ghz': circuits.ghz_circuit,\n    'qft': circuits.qft_circuit,\n    'w_state': circuits.w_state_circuit,\n    'grover': circuits.grover_circuit,\n}\nbackends = {\n    'statevector': StatevectorBackend(),\n    'mqt_dd': DecisionDiagramAdapter(),\n    'mps': MPSAdapter(),\n    'stim': StimAdapter(),\n}\nREPETITIONS = 5\nNUM_QUBITS = 2\nrecords = []\nfor cname, cfn in circuit_fns.items():\n    circuit = cfn(NUM_QUBITS)\n    for bname, backend in backends.items():\n        for _ in range(REPETITIONS):\n            runner = BenchmarkRunner()\n            try:\n                rec = runner.run_multiple(circuit, backend, return_state=False, repetitions=3)\n            except (NotImplementedError, RuntimeError):\n                continue\n            rec.update({'circuit': cname, 'backend_switches': 0, 'conversion_time': 0.0})\n            records.append(rec)\n    for _ in range(REPETITIONS):\n        ce = TrackingConversionEngine()\n        runner = BenchmarkRunner()\n        engine = SimulationEngine(conversion_engine=ce)\n        rec = runner.run_quasar(circuit, engine)\n        rec.update({'circuit': cname,\n                    'backend_switches': len(rec['result'].conversions),\n                    'conversion_time': ce.total_time})\n        records.append(rec)\ndf = pd.DataFrame(records)\ndf['runtime'] = df['total_time_mean'].fillna(df['total_time'])\ndf['peak_memory'] = df[['prepare_peak_memory', 'run_peak_memory', 'prepare_peak_memory_mean', 'run_peak_memory_mean']].max(axis=1)\nsummary = df.groupby(['circuit','framework']).agg(\n    runtime_mean=('runtime','mean'), runtime_std=('runtime','std'),\n    peak_memory_mean=('peak_memory','mean'), peak_memory_std=('peak_memory','std'),\n    backend_switches_mean=('backend_switches','mean'),\n    backend_switches_std=('backend_switches','std'),\n    conversion_time_mean=('conversion_time','mean'),\n    conversion_time_std=('conversion_time','std')\n).reset_index()\nresults = summary\nghz_backend = df[(df.circuit == 'ghz') & (df.framework == 'quasar')]['backend'].unique()\nassert len(ghz_backend) == 1 and ghz_backend[0].lower() in {'stim', 'tableau'}, f'GHZ routed to {ghz_backend}'\nsummary",
    "runtime_mean = summary.pivot(index='circuit', columns='framework', values='runtime_mean')\nruntime_std = summary.pivot(index='circuit', columns='framework', values='runtime_std')\nax = runtime_mean.plot.bar(yerr=runtime_std, capsize=4)\nax.set_ylabel('Runtime (s)')\nax.set_xlabel('Circuit')\nplt.tight_layout()\n\npeak_mean = summary.pivot(index='circuit', columns='framework', values='peak_memory_mean')\npeak_std = summary.pivot(index='circuit', columns='framework', values='peak_memory_std')\nax = peak_mean.plot.bar(yerr=peak_std, capsize=4)\nax.set_ylabel('Peak memory (B)')\nax.set_xlabel('Circuit')\nplt.tight_layout()",
    "speedup = []\nfor cname in circuit_fns:\n    quasar_time = summary[(summary.circuit==cname)&(summary.framework=='quasar')]['runtime_mean'].iloc[0]\n    baseline_times = summary[(summary.circuit==cname)&(summary.framework!='quasar')]['runtime_mean']\n    if not baseline_times.empty:\n        best_baseline = baseline_times.min()\n        speedup.append({'circuit': cname, 'speedup': best_baseline/quasar_time})\nspeedup_df = pd.DataFrame(speedup)\nspeedup_df",
    "ax = speedup_df.plot.bar(x='circuit', y='speedup', legend=False)\nax.set_ylabel('QuASAr speedup over best baseline')\nax.set_xlabel('Circuit')\nplt.tight_layout()",
    "import pandas as pd\nfrom benchmarks.stats_utils import stats_table\n\ndef add_stats(df, quasar_col='QuASAr', baseline_cols=None, test='ttest', correction='bonferroni'):\n    \"\"\"Compute statistics comparing QuASAr with baselines.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame with per-circuit results. One column must correspond to QuASAr,\n        others to baselines.\n    quasar_col : str\n        Name of the column containing QuASAr results.\n    baseline_cols : list[str] | None\n        Columns to treat as baselines. Defaults to all columns except quasar_col.\n    test : str\n        'ttest' or 'wilcoxon'.\n    correction : str\n        'bonferroni' or 'fdr_bh'.\n\n    Returns\n    -------\n    pd.DataFrame\n        Table with baseline name, statistic, corrected p-value, and effect size.\n    \"\"\"\n    if baseline_cols is None:\n        baseline_cols = [c for c in df.columns if c != quasar_col]\n    baselines = {c: df[c] for c in baseline_cols}\n    return stats_table(df[quasar_col], baselines, test=test, correction=correction)\n\n# Example usage after computing results DataFrame named `results_df`:\n# stats_df = add_stats(results_df)\n# stats_df",
    "# Record parameters and results\nimport json, pathlib\ntry:\n    import ipynbname\n    nb_name = ipynbname.path().stem\nexcept Exception:  # pragma: no cover\n    nb_name = 'notebook'\n\n# Collect simple parameters from globals\n_params = {\n    k: v for k, v in globals().items()\n    if not k.startswith('_') and isinstance(v, (int, float, str, bool, list, dict, tuple))\n}\npathlib.Path('../results').mkdir(exist_ok=True)\nwith open(f\"../results/{nb_name}_params.json\", 'w') as f:\n    try:\n        json.dump(_params, f, indent=2, default=str)\n    except TypeError:\n        pass\nif 'results' in globals():\n    try:\n        with open(f\"../results/{nb_name}_results.json\", 'w') as f:\n            json.dump(results, f, indent=2, default=str)\n    except TypeError:\n        pass\ntry:\n    print(json.dumps(_params, indent=2))\nexcept TypeError:\n    print(_params)"
  ],
  "Out": {
    "3": "    circuit framework  runtime_mean  runtime_std  peak_memory_mean  \\\n0       ghz    mqt_dd      0.010744     0.014690       1612.000000   \n1       ghz    quasar      0.003987     0.000483       8318.200000   \n2       ghz      stim      0.000139     0.000061        740.333333   \n3    grover    mqt_dd      0.004687     0.005498       2437.066667   \n4    grover    quasar      0.067133     0.002243      23592.200000   \n5    grover      stim           NaN          NaN               NaN   \n6       qft    mqt_dd      0.002232     0.000424       1607.333333   \n7       qft    quasar      0.015138     0.000466      31631.400000   \n8       qft      stim           NaN          NaN               NaN   \n9   w_state    mqt_dd      0.002919     0.000333       1610.133333   \n10  w_state    quasar      0.019569     0.000625      14432.400000   \n11  w_state      stim           NaN          NaN               NaN   \n\n    peak_memory_std  backend_switches_mean  backend_switches_std  \\\n0         17.888544                    0.0                   0.0   \n1       1127.752943                    0.0                   0.0   \n2          0.000000                    0.0                   0.0   \n3        273.377883                    0.0                   0.0   \n4        805.759393                    0.0                   0.0   \n5               NaN                    0.0                   0.0   \n6         12.092238                    0.0                   0.0   \n7      30898.491950                    0.0                   0.0   \n8               NaN                    0.0                   0.0   \n9         37.113639                    0.0                   0.0   \n10       604.632781                    0.0                   0.0   \n11              NaN                    0.0                   0.0   \n\n    conversion_time_mean  conversion_time_std  \n0                    0.0                  0.0  \n1                    0.0                  0.0  \n2                    0.0                  0.0  \n3                    0.0                  0.0  \n4                    0.0                  0.0  \n5                    0.0                  0.0  \n6                    0.0                  0.0  \n7                    0.0                  0.0  \n8                    0.0                  0.0  \n9                    0.0                  0.0  \n10                   0.0                  0.0  \n11                   0.0                  0.0  ",
    "5": "   circuit   speedup\n0      ghz  0.034897\n1      qft  0.147448\n2  w_state  0.149173\n3   grover  0.069814"
  },
  "circuit_fns": {
    "ghz": "<function ghz_circuit at 0x7fbe491d96c0>",
    "qft": "<function qft_circuit at 0x7fbe491d98a0>",
    "w_state": "<function w_state_circuit at 0x7fbe491d9da0>",
    "grover": "<function grover_circuit at 0x7fbe491d9e40>"
  },
  "backends": {
    "statevector": "StatevectorBackend(backend=StatevectorBackend(backend=<Backend.STATEVECTOR: 'sv'>, method='statevector', circuit=<qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x7fbe44a91610>, num_qubits=2, history=[], _benchmark_mode=False, _benchmark_ops=[], _cached_state=None), name='statevector')",
    "mqt_dd": "DecisionDiagramAdapter(backend=DecisionDiagramBackend(backend=<Backend.DECISION_DIAGRAM: 'dd'>, num_qubits=2, history=['H', 'CX', 'U', 'U', 'CX', 'U', 'U'], state=<mqt.core.dd.VectorDD object at 0x7fbe44ae1ab0>, package=<mqt.core.dd.DDPackage object at 0x7fbe44ae2b30>, _benchmark_mode=False, _benchmark_ops=[], _benchmark_state=<mqt.core.dd.VectorDD object at 0x7fbe44ae1ab0>, _ALIASES={'SDG': 'sdg', 'SXDG': 'sxdg', 'TDG': 'tdg', 'VDG': 'vdg', 'U1': 'p'}), name='mqt_dd')",
    "mps": "MPSAdapter(backend=MPSBackend(backend=<Backend.MPS: 'mps'>, method='matrix_product_state', circuit=<qiskit.circuit.quantumcircuit.QuantumCircuit object at 0x7fbe4746a9f0>, num_qubits=2, chi=16, history=[], _benchmark_mode=False, _benchmark_ops=[], _cached_state=None, _cached_statevector=None), name='mps')",
    "stim": "StimAdapter(backend=StimBackend(backend=<Backend.TABLEAU: 'tab'>, simulator=<stim._stim_sse2.TableauSimulator object at 0x7fbe44acebf0>, num_qubits=2, history=['H', 'CX'], _benchmark_mode=False, _benchmark_ops=[], _benchmark_tableau=stim.Tableau.from_conjugated_generators(\n    xs=[\n        stim.PauliString(\"+ZX\"),\n        stim.PauliString(\"+_X\"),\n    ],\n    zs=[\n        stim.PauliString(\"+X_\"),\n        stim.PauliString(\"+XZ\"),\n    ],\n), _ALIASES={'SDG': 's_dag'}), name='stim')"
  },
  "REPETITIONS": 5,
  "NUM_QUBITS": 2,
  "records": [
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.03587840333542166,
      "prepare_time_std": 0.007969190066019977,
      "run_time_mean": 0.00039497200001884875,
      "run_time_std": 7.555014126062674e-05,
      "total_time_mean": 0.036273375335440505,
      "total_time_std": 0.008012205299910709,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1644.0,
      "run_peak_memory_std": 39.191835884530846,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.010143083665752783,
      "prepare_time_std": 0.009619701123501582,
      "run_time_mean": 0.00023463166871806607,
      "run_time_std": 6.141062151230981e-05,
      "total_time_mean": 0.01037771533447085,
      "total_time_std": 0.009679578208782139,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1604.0,
      "run_peak_memory_std": 45.254833995939045,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0022125856679243348,
      "prepare_time_std": 5.711596324147015e-05,
      "run_time_mean": 0.00016277199999118844,
      "run_time_std": 8.296418545496225e-06,
      "total_time_mean": 0.002375357667915523,
      "total_time_std": 6.461226460342367e-05,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1604.0,
      "run_peak_memory_std": 45.254833995939045,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.002549128665123135,
      "prepare_time_std": 0.0005450751625966379,
      "run_time_mean": 0.00015784700129491588,
      "run_time_std": 1.1617101633526286e-05,
      "total_time_mean": 0.002706975666418051,
      "total_time_std": 0.0005563008116919262,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1604.0,
      "run_peak_memory_std": 45.254833995939045,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0018333433326915838,
      "prepare_time_std": 0.00013488204520363162,
      "run_time_mean": 0.0001537013352693369,
      "run_time_std": 7.81484512339063e-06,
      "total_time_mean": 0.001987044667960921,
      "total_time_std": 0.00013910770093479108,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1604.0,
      "run_peak_memory_std": 45.254833995939045,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 3,
      "prepare_time_mean": 0.0001885043335884499,
      "prepare_time_std": 0.00017898950215121777,
      "run_time_mean": 5.935700028203428e-05,
      "run_time_std": 2.1812031274478884e-05,
      "total_time_mean": 0.0002478613338704842,
      "total_time_std": 0.00020079694397835365,
      "prepare_peak_memory_mean": 421.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 740.3333333333334,
      "run_peak_memory_std": 30.169889330626027,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 3,
      "prepare_time_mean": 6.906699854880571e-05,
      "prepare_time_std": 1.5217693016931802e-05,
      "run_time_mean": 4.739800109139954e-05,
      "run_time_std": 6.56527325188469e-06,
      "total_time_mean": 0.00011646499964020525,
      "total_time_std": 2.174841494789458e-05,
      "prepare_peak_memory_mean": 421.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 740.3333333333334,
      "run_peak_memory_std": 30.169889330626027,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 3,
      "prepare_time_mean": 6.913733280574282e-05,
      "prepare_time_std": 3.3603366360991996e-06,
      "run_time_mean": 4.5972665247973055e-05,
      "run_time_std": 2.287238654382854e-06,
      "total_time_mean": 0.00011510999805371587,
      "total_time_std": 2.251537289712138e-06,
      "prepare_peak_memory_mean": 421.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 740.3333333333334,
      "run_peak_memory_std": 30.169889330626027,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 3,
      "prepare_time_mean": 6.493466450289513e-05,
      "prepare_time_std": 1.551125438457553e-05,
      "run_time_mean": 4.765800016078477e-05,
      "run_time_std": 6.873022733370406e-06,
      "total_time_mean": 0.0001125926646636799,
      "total_time_std": 2.2299957006172955e-05,
      "prepare_peak_memory_mean": 421.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 740.3333333333334,
      "run_peak_memory_std": 30.169889330626027,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 3,
      "prepare_time_mean": 6.0017002397216856e-05,
      "prepare_time_std": 1.4393400234395103e-05,
      "run_time_mean": 4.362333371924857e-05,
      "run_time_std": 4.088313017876892e-06,
      "total_time_mean": 0.00010364033611646543,
      "total_time_std": 1.847114781529907e-05,
      "prepare_peak_memory_mean": 421.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 740.3333333333334,
      "run_peak_memory_std": 30.169889330626027,
      "result": null,
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.004172891996859107,
      "run_time": 4.4810003601014614e-05,
      "total_time": 0.004217702000460122,
      "prepare_peak_memory": 10197,
      "run_peak_memory": 1874,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX'), backend=<Backend.TABLEAU: 'tab'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "TABLEAU",
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.0036052099967491813,
      "run_time": 4.2712003050837666e-05,
      "total_time": 0.003647921999800019,
      "prepare_peak_memory": 8509,
      "run_peak_memory": 1810,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX'), backend=<Backend.TABLEAU: 'tab'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "TABLEAU",
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.004675547999795526,
      "run_time": 4.6576999011449516e-05,
      "total_time": 0.004722124998806976,
      "prepare_peak_memory": 7877,
      "run_peak_memory": 1746,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX'), backend=<Backend.TABLEAU: 'tab'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "TABLEAU",
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.0035097400032100268,
      "run_time": 4.219800030114129e-05,
      "total_time": 0.003551938003511168,
      "prepare_peak_memory": 7520,
      "run_peak_memory": 1690,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX'), backend=<Backend.TABLEAU: 'tab'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "TABLEAU",
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.003724059999512974,
      "run_time": 7.120100053725764e-05,
      "total_time": 0.003795261000050232,
      "prepare_peak_memory": 7488,
      "run_peak_memory": 1642,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX'), backend=<Backend.TABLEAU: 'tab'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "TABLEAU",
      "circuit": "ghz",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0026989096659235656,
      "prepare_time_std": 0.00023134438960503815,
      "run_time_mean": 0.0002575103329339375,
      "run_time_std": 2.2032682875716174e-05,
      "total_time_mean": 0.0029564199988575033,
      "total_time_std": 0.00023317925986574684,
      "prepare_peak_memory_mean": 240.0,
      "prepare_peak_memory_std": 0.0,
      "run_peak_memory_mean": 1596.0,
      "run_peak_memory_std": 0.0,
      "result": null,
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0020516410004347563,
      "prepare_time_std": 0.00017559524249552056,
      "run_time_mean": 0.000195492333053456,
      "run_time_std": 6.516601517983451e-06,
      "total_time_mean": 0.0022471333334882124,
      "total_time_std": 0.00018162050330584265,
      "prepare_peak_memory_mean": 240.0,
      "prepare_peak_memory_std": 0.0,
      "run_peak_memory_mean": 1596.0,
      "run_peak_memory_std": 0.0,
      "result": null,
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0017693546663698119,
      "prepare_time_std": 5.978735908994493e-05,
      "run_time_mean": 0.00021069333403526494,
      "run_time_std": 2.9421497056564553e-05,
      "total_time_mean": 0.001980048000405077,
      "total_time_std": 8.910681416571824e-05,
      "prepare_peak_memory_mean": 240.0,
      "prepare_peak_memory_std": 0.0,
      "run_peak_memory_mean": 1604.6666666666667,
      "run_peak_memory_std": 12.256517540566824,
      "result": null,
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0016800116670007508,
      "prepare_time_std": 5.2290484561082044e-05,
      "run_time_mean": 0.00022752099903300405,
      "run_time_std": 3.1402219951894916e-05,
      "total_time_mean": 0.0019075326660337548,
      "total_time_std": 8.368153092699764e-05,
      "prepare_peak_memory_mean": 240.0,
      "prepare_peak_memory_std": 0.0,
      "run_peak_memory_mean": 1620.0,
      "run_peak_memory_std": 33.94112549695428,
      "result": null,
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0018685486672135692,
      "prepare_time_std": 9.112254466621599e-05,
      "run_time_mean": 0.00020039500183581063,
      "run_time_std": 5.2805226974005205e-06,
      "total_time_mean": 0.00206894366904938,
      "total_time_std": 8.969785037254848e-05,
      "prepare_peak_memory_mean": 240.0,
      "prepare_peak_memory_std": 0.0,
      "run_peak_memory_mean": 1620.0,
      "run_peak_memory_std": 33.94112549695428,
      "result": null,
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate CP",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate CP",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate CP",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate CP",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate CP",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.015289966999262106,
      "run_time": 0.000305238994769752,
      "total_time": 0.015595205994031858,
      "prepare_peak_memory": 14140,
      "run_peak_memory": 86903,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CP', 'H'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.01527409399568569,
      "run_time": 0.00024854400544427335,
      "total_time": 0.015522638001129963,
      "prepare_peak_memory": 12844,
      "run_peak_memory": 18173,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CP', 'H'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.014954759993997868,
      "run_time": 0.0003276229981565848,
      "total_time": 0.015282382992154453,
      "prepare_peak_memory": 12747,
      "run_peak_memory": 17755,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CP', 'H'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.014379804997588508,
      "run_time": 0.0002282999994349666,
      "total_time": 0.014608104997023474,
      "prepare_peak_memory": 12740,
      "run_peak_memory": 17695,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CP', 'H'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.014426371999434195,
      "run_time": 0.0002533779988880269,
      "total_time": 0.014679749998322222,
      "prepare_peak_memory": 12724,
      "run_peak_memory": 17631,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CP', 'H'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "qft",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0029914119998769215,
      "prepare_time_std": 0.0001790463282868544,
      "run_time_mean": 0.00029991100018378347,
      "run_time_std": 2.1484317577342556e-05,
      "total_time_mean": 0.003291323000060705,
      "total_time_std": 0.00020003941301477744,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1636.6666666666667,
      "run_peak_memory_std": 32.99831645537222,
      "result": null,
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.002929982998466585,
      "prepare_time_std": 0.00041161432515240737,
      "run_time_mean": 0.0002636633338018631,
      "run_time_std": 2.9816518387231e-05,
      "total_time_mean": 0.003193646332268448,
      "total_time_std": 0.00041011018363378243,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1662.0,
      "run_peak_memory_std": 45.254833995939045,
      "result": null,
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0026369653326886087,
      "prepare_time_std": 6.987636219575048e-05,
      "run_time_mean": 0.0003053610004523459,
      "run_time_std": 5.367879411226483e-05,
      "total_time_mean": 0.0029423263331409544,
      "total_time_std": 0.00011460402745102206,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1577.3333333333333,
      "run_peak_memory_std": 63.505030421919244,
      "result": null,
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0024194833313231356,
      "prepare_time_std": 8.093240673923427e-05,
      "run_time_mean": 0.00021946500298023844,
      "run_time_std": 2.029277069693017e-05,
      "total_time_mean": 0.002638948334303374,
      "total_time_std": 9.796274432504608e-05,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1587.3333333333333,
      "run_peak_memory_std": 49.45929864264375,
      "result": null,
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.002329721668502316,
      "prepare_time_std": 2.437328092555181e-05,
      "run_time_mean": 0.0001998229975773332,
      "run_time_std": 2.2720460537969632e-06,
      "total_time_mean": 0.0025295446660796492,
      "total_time_std": 2.5695060180323477e-05,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 1587.3333333333333,
      "run_peak_memory_std": 49.45929864264375,
      "result": null,
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate RY",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate RY",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate RY",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate RY",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate RY",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.019133082998450845,
      "run_time": 0.0002796319968183525,
      "total_time": 0.019412714995269198,
      "prepare_peak_memory": 15514,
      "run_peak_memory": 2117,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('RY', 'CX', 'X'), backend=<Backend.DECISION_DIAGRAM: 'dd'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "DECISION_DIAGRAM",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.01990794900484616,
      "run_time": 0.00038805299845989794,
      "total_time": 0.020296002003306057,
      "prepare_peak_memory": 14162,
      "run_peak_memory": 2101,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('RY', 'CX', 'X'), backend=<Backend.DECISION_DIAGRAM: 'dd'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "DECISION_DIAGRAM",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.01855916100612376,
      "run_time": 0.0003913690015906468,
      "total_time": 0.018950530007714406,
      "prepare_peak_memory": 14162,
      "run_peak_memory": 2077,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('RY', 'CX', 'X'), backend=<Backend.DECISION_DIAGRAM: 'dd'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "DECISION_DIAGRAM",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.01862634899589466,
      "run_time": 0.00040742899727774784,
      "total_time": 0.019033777993172407,
      "prepare_peak_memory": 14162,
      "run_peak_memory": 2061,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('RY', 'CX', 'X'), backend=<Backend.DECISION_DIAGRAM: 'dd'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "DECISION_DIAGRAM",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.0197965289989952,
      "run_time": 0.0003551030022208579,
      "total_time": 0.020151632001216058,
      "prepare_peak_memory": 14162,
      "run_peak_memory": 2045,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('RY', 'CX', 'X'), backend=<Backend.DECISION_DIAGRAM: 'dd'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "DECISION_DIAGRAM",
      "circuit": "w_state",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.013950718001675947,
      "prepare_time_std": 0.01567012594142258,
      "run_time_mean": 0.0005281563304985563,
      "run_time_std": 3.68233057767563e-05,
      "total_time_mean": 0.014478874332174504,
      "total_time_std": 0.015700329850549907,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 2880.0,
      "run_peak_memory_std": 192.33304448274092,
      "result": null,
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0026625846658134833,
      "prepare_time_std": 0.0012211317998991398,
      "run_time_mean": 0.0004673669997525091,
      "run_time_std": 3.7630490960867444e-05,
      "total_time_mean": 0.0031299516655659923,
      "total_time_std": 0.001212549887775528,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 2438.6666666666665,
      "run_peak_memory_std": 51.88020388891658,
      "result": null,
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0015246319987151462,
      "prepare_time_std": 0.00019205224923337332,
      "run_time_mean": 0.0004150963335026366,
      "run_time_std": 8.390404557993211e-06,
      "total_time_mean": 0.0019397283322177827,
      "total_time_std": 0.00018700587431721811,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 2430.6666666666665,
      "run_peak_memory_std": 58.08805576211191,
      "result": null,
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0014475963325821795,
      "prepare_time_std": 0.00013287313751179453,
      "run_time_mean": 0.00042801133531611413,
      "run_time_std": 2.1211825903027708e-05,
      "total_time_mean": 0.0018756076678982936,
      "total_time_std": 0.00012685043531773782,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 2160.0,
      "run_peak_memory_std": 93.46657156438339,
      "result": null,
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "mqt_dd",
      "backend": "mqt_dd",
      "repetitions": 3,
      "prepare_time_mean": 0.0015824250028041813,
      "prepare_time_std": 0.000258753528814715,
      "run_time_mean": 0.00042730100055147585,
      "run_time_std": 1.4970544706287693e-05,
      "total_time_mean": 0.002009726003355657,
      "total_time_std": 0.0002713051629923964,
      "prepare_peak_memory_mean": 261.3333333333333,
      "prepare_peak_memory_std": 30.169889330626027,
      "run_peak_memory_mean": 2276.0,
      "run_peak_memory_std": 102.91744264214886,
      "result": null,
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate U",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate U",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate U",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate U",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "stim",
      "backend": "stim",
      "repetitions": 0,
      "unsupported": true,
      "comment": "Unsupported Stim gate U",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.06711586700112093,
      "run_time": 0.0028641820026678033,
      "total_time": 0.06998004900378874,
      "prepare_peak_memory": 24356,
      "run_peak_memory": 25033,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX', 'U', 'U', 'CX', 'U', 'U'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.06548035099694971,
      "run_time": 0.001888304999738466,
      "total_time": 0.06736865599668818,
      "prepare_peak_memory": 23236,
      "run_peak_memory": 19914,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX', 'U', 'U', 'CX', 'U', 'U'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.0617826919988147,
      "run_time": 0.002011085998674389,
      "total_time": 0.06379377799748909,
      "prepare_peak_memory": 23212,
      "run_peak_memory": 19625,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX', 'U', 'U', 'CX', 'U', 'U'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.06600626799627207,
      "run_time": 0.0018780109967337921,
      "total_time": 0.06788427899300586,
      "prepare_peak_memory": 23268,
      "run_peak_memory": 19440,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX', 'U', 'U', 'CX', 'U', 'U'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    },
    {
      "framework": "quasar",
      "prepare_time": 0.06474676900688792,
      "run_time": 0.0018895639950642362,
      "total_time": 0.06663633300195215,
      "prepare_peak_memory": 23212,
      "run_peak_memory": 19330,
      "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX', 'U', 'U', 'CX', 'U', 'U'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
      "failed": false,
      "backend": "MPS",
      "circuit": "grover",
      "backend_switches": 0,
      "conversion_time": 0.0
    }
  ],
  "cname": "grover",
  "bname": "stim",
  "rec": {
    "framework": "quasar",
    "prepare_time": 0.06474676900688792,
    "run_time": 0.0018895639950642362,
    "total_time": 0.06663633300195215,
    "prepare_peak_memory": 23212,
    "run_peak_memory": 19330,
    "result": "SSD(partitions=[SSDPartition(subsystems=((0, 1),), history=('H', 'CX', 'U', 'U', 'CX', 'U', 'U'), backend=<Backend.MPS: 'mps'>, cost=Cost(time=0.0, memory=0.0, log_depth=0.0, conversion=0.0, replay=0.0))], conversions=[])",
    "failed": false,
    "backend": "MPS",
    "circuit": "grover",
    "backend_switches": 0,
    "conversion_time": 0.0
  },
  "speedup": [
    {
      "circuit": "ghz",
      "speedup": 0.03489697250541227
    },
    {
      "circuit": "qft",
      "speedup": 0.1474482821534623
    },
    {
      "circuit": "w_state",
      "speedup": 0.14917307815542727
    },
    {
      "circuit": "grover",
      "speedup": 0.06981371604675883
    }
  ],
  "quasar_time": 0.0671326189985848,
  "best_baseline": 0.0046867776002424465,
  "nb_name": "notebook"
}