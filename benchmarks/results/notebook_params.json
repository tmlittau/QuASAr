{
  "In": [
    "",
    "import json\nimport sys\nimport subprocess\nimport tempfile\nfrom pathlib import Path\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme()",
    "tmp = Path(tempfile.gettempdir())/\"quasar_cli_example\"\nsubprocess.run([sys.executable, \"../benchmark_cli.py\", \"--circuit\", \"ghz\", \"--qubits\", \"2:5\", \"--repetitions\", \"2\", \"--output\", str(tmp)], check=True)\n\ncli_df = pd.read_csv(tmp.with_suffix(\".csv\"))\n\ncli_df",
    "sns.lineplot(data=cli_df, x=\"qubits\", y=\"avg_time\", marker=\"o\")\nplt.title(\"GHZ circuit benchmark\")\nplt.xlabel(\"Qubits\")\nplt.ylabel(\"Average time (s)\")\nplt.show()",
    "nb_root = Path('..' ).resolve()\nsys.path.append(str(nb_root))\nsys.path.append(str(nb_root.parent))\n\nfrom runner import BenchmarkRunner\nfrom backends import (\n    StatevectorAdapter,\n    StimAdapter,\n    MPSAdapter,\n    DecisionDiagramAdapter,\n)\nimport circuits as circuit_lib\nfrom quasar import SimulationEngine\nfrom quasar.cost import Backend\n\nbackends = [StatevectorAdapter(), StimAdapter()]\nrunner = BenchmarkRunner()\nengine = SimulationEngine()\n\ncircuits = {\n    'ghz': circuit_lib.ghz_circuit,\n    'qft': circuit_lib.qft_circuit,\n}\n\nqubit_sizes = list(range(2, 6))\n\nfor name, build in circuits.items():\n    for n in qubit_sizes:\n        try:\n            circ = build(n)\n        except Exception:\n            continue\n        for b in backends:\n            try:\n                rec = runner.run_multiple(circ, b, return_state=False, repetitions=3)\n                rec['circuit'] = name\n                rec['qubits'] = n\n                rec['backend'] = b.name\n            except Exception:\n                pass\n            try:\n                kwargs = {'repetitions': 3}\n                if b.name == 'stim':\n                    kwargs['backend'] = Backend.TABLEAU\n                rec = runner.run_quasar_multiple(\n                    circ,\n                    engine,\n                    **kwargs,\n                )\n                rec['circuit'] = name\n                rec['qubits'] = n\n            except Exception:\n                pass\n\n\ndf = pd.DataFrame(runner.results)\ndf_long = df.melt(\n    id_vars=['circuit', 'framework', 'backend', 'qubits'],\n    value_vars=['prepare_time_mean', 'run_time_mean'],\n    var_name='phase',\n    value_name='time',\n)\ng = sns.relplot(\n    data=df_long,\n    x='qubits',\n    y='time',\n    hue='framework',\n    style='phase',\n    col='circuit',\n    col_wrap=3,\n    kind='line',\n)\ng.set(yscale='log')\nplt.show()\ndf[['circuit', 'framework', 'backend', 'qubits', 'prepare_time_mean', 'run_time_mean', 'total_time_mean']]",
    "import pandas as pd\nfrom benchmarks.stats_utils import stats_table\n\ndef add_stats(df, quasar_col='QuASAr', baseline_cols=None, test='ttest', correction='bonferroni'):\n    \"\"\"Compute statistics comparing QuASAr with baselines.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame with per-circuit results. One column must correspond to QuASAr,\n        others to baselines.\n    quasar_col : str\n        Name of the column containing QuASAr results.\n    baseline_cols : list[str] | None\n        Columns to treat as baselines. Defaults to all columns except quasar_col.\n    test : str\n        'ttest' or 'wilcoxon'.\n    correction : str\n        'bonferroni' or 'fdr_bh'.\n\n    Returns\n    -------\n    pd.DataFrame\n        Table with baseline name, statistic, corrected p-value, and effect size.\n    \"\"\"\n    if baseline_cols is None:\n        baseline_cols = [c for c in df.columns if c != quasar_col]\n    baselines = {c: df[c] for c in baseline_cols}\n    return stats_table(df[quasar_col], baselines, test=test, correction=correction)\n\n# Example usage after computing results DataFrame named `results_df`:\n# stats_df = add_stats(results_df)\n# stats_df",
    "# Record parameters and results\nimport json, pathlib\ntry:\n    import ipynbname\n    nb_name = ipynbname.path().stem\nexcept Exception:  # pragma: no cover\n    nb_name = 'notebook'\n\n# Collect simple parameters from globals\n_params = {\n    k: v for k, v in globals().items()\n    if not k.startswith('_') and isinstance(v, (int, float, str, bool, list, dict, tuple))\n}\npathlib.Path('../results').mkdir(exist_ok=True)\nwith open(f'../results/{nb_name}_params.json', 'w') as f:\n    json.dump(_params, f, indent=2, default=str)\nif 'results' in globals():\n    try:\n        with open(f'../results/{nb_name}_results.json', 'w') as f:\n            json.dump(results, f, indent=2)\n    except TypeError:\n        pass\nprint(json.dumps(_params, indent=2, default=str))"
  ],
  "Out": {
    "2": "       circuit  qubits    framework  repetitions  avg_time  time_variance  \\\n0  ghz_circuit       2  statevector            2  0.004285   8.243224e-07   \n1  ghz_circuit       3  statevector            2  0.001800   5.199924e-09   \n2  ghz_circuit       4  statevector            2  0.001822   6.714901e-09   \n3  ghz_circuit       5  statevector            2  0.001820   9.204486e-11   \n\n   avg_total_time  total_time_variance  avg_prepare_peak_memory  \\\n0        0.004291         8.232550e-07                       80   \n1        0.001803         5.195959e-09                       80   \n2        0.001825         6.724984e-09                       80   \n3        0.001823         9.244825e-11                      112   \n\n   prepare_peak_memory_variance  avg_run_peak_memory  run_peak_memory_variance  \n0                             0              50040.0              9.887251e+08  \n1                             0              18691.0              1.988100e+04  \n2                             0              19368.5              1.440202e+05  \n3                             0              19678.5              6.162250e+03  ",
    "4": "   circuit    framework      backend  qubits  prepare_time_mean  \\\n0      ghz  statevector  statevector       2           0.000432   \n1      ghz       quasar      TABLEAU       2           0.000128   \n2      ghz         stim         stim       2           0.000004   \n3      ghz       quasar      TABLEAU       2           0.000070   \n4      ghz  statevector  statevector       3           0.000399   \n5      ghz       quasar      TABLEAU       3           0.000076   \n6      ghz         stim         stim       3           0.000003   \n7      ghz       quasar      TABLEAU       3           0.000063   \n8      ghz  statevector  statevector       4           0.000403   \n9      ghz       quasar      TABLEAU       4           0.000101   \n10     ghz         stim         stim       4           0.000003   \n11     ghz       quasar      TABLEAU       4           0.000073   \n12     ghz  statevector  statevector       5           0.000515   \n13     ghz       quasar      TABLEAU       5           0.000104   \n14     ghz         stim         stim       5           0.000003   \n15     ghz       quasar      TABLEAU       5           0.000093   \n16     qft  statevector  statevector       2           0.000639   \n17     qft       quasar  STATEVECTOR       2           0.000544   \n18     qft         stim         stim       2                NaN   \n19     qft  statevector  statevector       3           0.000798   \n20     qft       quasar  STATEVECTOR       3           0.000894   \n21     qft         stim         stim       3                NaN   \n22     qft  statevector  statevector       4           0.001316   \n23     qft       quasar  STATEVECTOR       4           0.001360   \n24     qft         stim         stim       4                NaN   \n25     qft  statevector  statevector       5           0.002010   \n26     qft       quasar  STATEVECTOR       5           0.002415   \n27     qft         stim         stim       5                NaN   \n\n    run_time_mean  total_time_mean  \n0        0.003771         0.004202  \n1        0.000039         0.000168  \n2        0.000666         0.000669  \n3        0.000031         0.000101  \n4        0.001678         0.002077  \n5        0.000036         0.000112  \n6        0.000108         0.000110  \n7        0.000022         0.000085  \n8        0.001700         0.002103  \n9        0.000043         0.000144  \n10       0.000125         0.000128  \n11       0.000022         0.000095  \n12       0.001806         0.002321  \n13       0.000065         0.000169  \n14       0.000140         0.000143  \n15       0.000023         0.000116  \n16       0.002256         0.002895  \n17       0.002055         0.002599  \n18            NaN              NaN  \n19       0.002710         0.003508  \n20       0.002445         0.003339  \n21            NaN              NaN  \n22       0.002977         0.004292  \n23       0.003219         0.004580  \n24            NaN              NaN  \n25       0.003857         0.005867  \n26       0.004131         0.006546  \n27            NaN              NaN  "
  },
  "backends": [
    "StatevectorAdapter(name='statevector', backend_cls=<class 'quasar.backends.statevector.StatevectorBackend'>, defer_build=False)",
    "StimAdapter(name='stim', backend_cls=<class 'quasar.backends.stim_backend.StimBackend'>, defer_build=True)"
  ],
  "circuits": {
    "ghz": "<function ghz_circuit at 0x7feca9353880>",
    "qft": "<function qft_circuit at 0x7feca93539c0>"
  },
  "qubit_sizes": [
    2,
    3,
    4,
    5
  ],
  "name": "qft",
  "n": 5,
  "rec": {
    "framework": "stim",
    "repetitions": 0,
    "unsupported": true,
    "comment": "Unsupported Stim gate U",
    "circuit": "qft",
    "qubits": 5,
    "backend": "stim"
  },
  "kwargs": {
    "repetitions": 3,
    "backend": "Backend.TABLEAU"
  },
  "nb_name": "notebook"
}