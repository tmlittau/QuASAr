{
  "In": [
    "",
    "from benchmarks.backends import DecisionDiagramAdapter\nfrom benchmarks.runner import BenchmarkRunner\nfrom benchmarks import circuits\nimport pandas as pd",
    "# Select representative circuits\ncircuits_to_run = [\n    (\"GHZ\", circuits.ghz_circuit(5)),\n    (\"QFT\", circuits.qft_circuit(5)),\n    (\"Grover\", circuits.grover_circuit(5, 1)),\n]\n\nrunner = BenchmarkRunner()\nbackend = DecisionDiagramAdapter()\nfor name, circ in circuits_to_run:\n    res = runner.run_multiple(circ, backend, return_state=False, repetitions=3)\n    res[\"circuit\"] = name\n\ndf = runner.dataframe()\ndf[[\"circuit\", \"prepare_time_mean\", \"run_time_mean\", \"total_time_mean\", \"prepare_peak_memory_mean\", \"run_peak_memory_mean\"]]",
    "import pandas as pd\nfrom benchmarks.stats_utils import stats_table\n\ndef add_stats(df, quasar_col='QuASAr', baseline_cols=None, test='ttest', correction='bonferroni'):\n    \"\"\"Compute statistics comparing QuASAr with baselines.\n\n    Parameters\n    ----------\n    df : pandas.DataFrame\n        DataFrame with per-circuit results. One column must correspond to QuASAr,\n        others to baselines.\n    quasar_col : str\n        Name of the column containing QuASAr results.\n    baseline_cols : list[str] | None\n        Columns to treat as baselines. Defaults to all columns except quasar_col.\n    test : str\n        'ttest' or 'wilcoxon'.\n    correction : str\n        'bonferroni' or 'fdr_bh'.\n\n    Returns\n    -------\n    pd.DataFrame\n        Table with baseline name, statistic, corrected p-value, and effect size.\n    \"\"\"\n    if baseline_cols is None:\n        baseline_cols = [c for c in df.columns if c != quasar_col]\n    baselines = {c: df[c] for c in baseline_cols}\n    return stats_table(df[quasar_col], baselines, test=test, correction=correction)\n\n# Example usage after computing results DataFrame named `results_df`:\n# stats_df = add_stats(results_df)\n# stats_df",
    "# Record parameters and results\nimport json, pathlib\ntry:\n    import ipynbname\n    nb_name = ipynbname.path().stem\nexcept Exception:  # pragma: no cover\n    nb_name = 'notebook'\n\n# Collect simple parameters from globals\n_params = {\n    k: v for k, v in globals().items()\n    if not k.startswith('_') and isinstance(v, (int, float, str, bool, list, dict, tuple))\n}\npathlib.Path('../results').mkdir(exist_ok=True)\nwith open(f\"../results/{nb_name}_params.json\", 'w') as f:\n    json.dump(_params, f, indent=2, default=str)\nif 'results' in globals():\n    try:\n        with open(f\"../results/{nb_name}_results.json\", 'w') as f:\n            json.dump(results, f, indent=2, default=str)\n    except TypeError:\n        pass\nprint(json.dumps(_params, indent=2, default=str))"
  ],
  "Out": {
    "2": "  circuit  prepare_time_mean  run_time_mean  total_time_mean  \\\n0     GHZ           0.026385       0.000368         0.026753   \n1     QFT           0.006584       0.000616         0.007200   \n2  Grover           0.001611       0.005815         0.007425   \n\n   prepare_peak_memory_mean  run_peak_memory_mean  \n0                240.000000           2777.000000  \n1                288.000000           4475.000000  \n2               4893.333333          26395.666667  "
  },
  "circuits_to_run": [
    [
      "GHZ",
      "<quasar.circuit.Circuit object at 0x7fb2a4150380>"
    ],
    [
      "QFT",
      "<quasar.circuit.Circuit object at 0x7fb26c701640>"
    ],
    [
      "Grover",
      "<quasar.circuit.Circuit object at 0x7fb26b128830>"
    ]
  ],
  "name": "Grover",
  "res": {
    "framework": "mqt_dd",
    "backend": "mqt_dd",
    "repetitions": 3,
    "prepare_time_mean": 0.0016109573333267235,
    "prepare_time_std": 0.0004347398838193415,
    "run_time_mean": 0.005814512333330413,
    "run_time_std": 0.0002520773362514418,
    "total_time_mean": 0.007425469666657136,
    "total_time_std": 0.0006772928738316745,
    "prepare_peak_memory_mean": 4893.333333333333,
    "prepare_peak_memory_std": 4747.986333407272,
    "run_peak_memory_mean": 26395.666666666668,
    "run_peak_memory_std": 5017.102904620909,
    "result": null,
    "circuit": "Grover"
  },
  "nb_name": "notebook"
}